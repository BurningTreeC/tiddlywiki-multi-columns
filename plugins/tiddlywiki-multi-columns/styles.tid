title: $:/plugins/BTC/tiddlywiki-multi-columns/styles
tags: $:/tags/Stylesheet

\define get-color-scheme() <$text text={{{ [{$:/palette}get[color-scheme]] }}}/>
\define set-color-scheme()
\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline macrocallblock
:root {
	color-scheme: <<get-color-scheme>>;
}

\end

\define style-focused-tiddler()

.tc-river-$(currentColumn)$ .tc-river-inner [data-tiddler-title="$(cssEscapedTitle)$"] > .tc-tiddler-frame {
	border: {{$:/config/story-river/tiddler-border}}px solid <<colour focused-tiddler>>;
}

\end

\define style-focused-tiddler-normal()

.tc-story-river [data-tiddler-title="$(cssEscapedTitle)$"].tc-tiddler-frame {
	border: 1px solid <<colour focused-tiddler>>;
}

\end

\define style-unfocused-tiddlers()

.tc-river-$(column)$ .tc-river-inner [data-tiddler-title="$(cssEscapedTitle)$"] > .tc-tiddler-frame {
	border: {{$:/config/story-river/tiddler-border}}px solid <<colour muted-foreground>>;
}

\end

\define column-layout()

<$list filter="[list[$:/columns]] ~1" variable="currentColumn">

.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > *:nth-child(<<currentColumn>>) {
	flex-basis: 0;
	flex-grow: 1;
	flex-shrink: 0;
	overflow-y: scroll;
	overflow-x: hidden;
}

	<$list filter="[{$:/config/story-river/hide-scrollbars}match[yes]]" variable="ignore">

		.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > *:nth-child(<<currentColumn>>) {
			-ms-overflow-style: none;
			scrollbar-width: none;
		}
		.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > *:nth-child(<<currentColumn>>)::-webkit-scrollbar { 
			display: none;
		}

	</$list>

</$list>

\end

\define target-tiddler-margin()

.tc-river-$(currentRiver)$ .tc-tiddler-view-frame:not([data-tiddler-title="$(targetTiddlerCSSEscaped)$"]) .tc-tiddler-frame, .tc-river-$(currentRiver)$ .tc-tiddler-edit-frame:not([data-tiddler-title="$(targetTiddlerCSSEscaped)$"]) .tc-tiddler-frame {
	margin-top: {{$:/config/story-river/tiddler-margin}}px;
}

.tc-river-$(currentRiver)$ .tc-tiddler-view-frame:first-of-type:not([data-tiddler-title="$(targetTiddlerCSSEscaped)$"]) .tc-tiddler-frame, .tc-river-$(currentRiver)$ .tc-tiddler-edit-frame:first-of-type:not([data-tiddler-title="$(targetTiddlerCSSEscaped)$"]) .tc-tiddler-frame {
	margin-top: 0;
}

.tc-river-$(currentRiver)$ [data-tiddler-title="$(targetTiddlerCSSEscaped)$"] .tc-tiddler-frame {
	margin-top: calc({{$:/state/dragging!!height}}px + (2 * {{$:/config/story-river/tiddler-margin}}px));
}

<$list filter="[{$:/state/dragging!!nth}match[0]]">

.tc-river-$(currentRiver)$ [data-tiddler-title="$(targetTiddlerCSSEscaped)$"] .tc-tiddler-frame {
	margin-top: calc({{$:/state/dragging!!height}}px + {{$:/config/story-river/tiddler-margin}}px);
}

</$list>

\end

\define tiddler-frame-transitions()

.tc-river-inner > .tc-tiddler-view-frame > .tc-tiddler-frame, .tc-river-inner > .tc-tiddler-edit-frame > .tc-tiddler-frame {
	transition: margin-top {{$:/config/AnimationDuration}}ms cubic-bezier(0.645, 0.045, 0.355, 1), margin-bottom {{$:/config/AnimationDuration}}ms cubic-bezier(0.645, 0.045, 0.355, 1);
}

\end

\define position-start-tiddlers()

<$list filter="[{$:/state/dragging!!copying}!match[yes]]">

.tc-river-$(currentRiver)$ .tc-river-inner > [data-tiddler-title="$(startingNextTiddlerCSSEscaped)$"].tc-tiddler-view-frame > .tc-tiddler-frame, .tc-river-$(currentRiver)$ .tc-river-inner > [data-tiddler-title="$(startingNextTiddlerCSSEscaped)$"].tc-tiddler-edit-frame > .tc-tiddler-frame {
	transition: none;
}

.tc-river-$(currentRiver)$ [data-tiddler-title="$(startingNextTiddlerCSSEscaped)$"] .tc-tiddler-frame {
	margin-top: calc({{$:/state/dragging!!height}}px + (2 * {{$:/config/story-river/tiddler-margin}}px));
}

<$list filter="[{$:/state/dragging!!nth}match[0]]">

.tc-river-$(currentRiver)$ [data-tiddler-title="$(startingNextTiddlerCSSEscaped)$"] .tc-tiddler-frame {
	margin-top: calc({{$:/state/dragging!!height}}px + {{$:/config/story-river/tiddler-margin}}px);
}

</$list>

</$list>

<$list filter="[{$:/state/dragging!!copying}match[yes]]">

.tc-river-$(currentRiver)$ .tc-river-inner > [data-tiddler-title="$(dragTiddlerCSSEscaped)$"].tc-tiddler-view-frame > .tc-tiddler-frame, .tc-river-$(currentRiver)$ .tc-river-inner > [data-tiddler-title="$(dragTiddlerCSSEscaped)$"].tc-tiddler-edit-frame > .tc-tiddler-frame {
	transition: none;
}

.tc-river-$(currentRiver)$ [data-tiddler-title="$(dragTiddlerCSSEscaped)$"] .tc-tiddler-frame {
	margin-top: calc({{$:/state/dragging!!height}}px + (2 * {{$:/config/story-river/tiddler-margin}}px));
}

<$list filter="[{$:/state/dragging!!nth}match[0]]">

.tc-river-$(currentRiver)$ [data-tiddler-title="$(dragTiddlerCSSEscaped)$"] .tc-tiddler-frame {
	margin-top: calc({{$:/state/dragging!!height}}px + {{$:/config/story-river/tiddler-margin}}px);
}

</$list>

</$list>

\end

<$list filter="[{$:/layout}match[$:/plugins/BTC/tiddlywiki-multi-columns/ui/Layout]]" variable="ignore">

<<set-color-scheme>>

.tc-river-inner .tc-tiddler-frame {
	border-top-width: {{$:/config/story-river/tiddler-border}}px;
	border-bottom-width: {{$:/config/story-river/tiddler-border}}px;
	border-left-width: {{$:/config/story-river/tiddler-border}}px;
	border-right-width: {{$:/config/story-river/tiddler-border}}px;
	margin-bottom: {{$:/config/story-river/tiddler-margin}}px;
}

.tc-panel {
	visibility: hidden;
	transition: visibility 0s calc(2 * {{$:/config/AnimationDuration}}ms);
	-webkit-transition: visibility 0s calc(2 * {{$:/config/AnimationDuration}}ms);
}

.tc-panel.tc-panel-is-visible {
	visibility: visible;
	transition: visibility 0s 0s;
}

.tc-panel-hide {
	position: absolute;
	top: 0;
	left: 0;
	bottom: 0;
	right: 0;
	width: 100vw;
	height: 100vh;
	background: 0 0;
	visibility: hidden;
	z-index: 10000;
	cursor: pointer;
	-webkit-transition: background {{$:/config/AnimationDuration}}ms {{$:/config/AnimationDuration}}ms, visibility 0s calc(2 * {{$:/config/AnimationDuration}}ms);
	transition: background {{$:/config/AnimationDuration}}ms {{$:/config/AnimationDuration}}ms, visibility 0s calc(2 * {{$:/config/AnimationDuration}}ms);
}

.tc-panel-hide.tc-panel-shown {
	visibility: visible;
	background: <<colour hide-panel-button-light>>;
	-webkit-transition: background {{$:/config/AnimationDuration}}ms 0s;
	transition: background {{$:/config/AnimationDuration}}ms 0s;
}

<$list filter="[{$:/palette}get[color-scheme]match[dark]]">

.tc-panel-hide.tc-panel-shown {
	background: <<colour hide-panel-button-dark>>;
}

</$list>

.tc-panel-header {
	position: fixed;
	top: 0;
	width: 90%;
	height: 50px;
	transition: transform {{$:/config/AnimationDuration}}ms 0s;
	transform: translateY(-78px);
	z-index: 10002;
	line-height: 50px;
	box-shadow: 0 1px 1px <<colour panel-header-box-shadow-light>>;
	background-color: <<colour panel-header-background-light>>;
}

.tc-search-panel {
	position: fixed;
	left: 0;
	width: 100%;
	height: 75px;
	transition: transform calc({{$:/config/AnimationDuration}}ms / 2) calc({{$:/config/AnimationDuration}}ms / 2);
	z-index: 10003;
}

.tc-search-panel.tc-search-panel-from-top {
	top: 0;
	transform: translateY(-75px);
}

.tc-search-panel.tc-search-panel-from-bottom {
	bottom: 0;
	transform: translateY(75px);
}

.tc-search-panel-is-visible.tc-search-panel {
	transition: transform {{$:/config/AnimationDuration}}ms 0s;
	transform: translateY(0px);
}

.tc-search-panel-inner {
	position: relative;
	height: 100%;
	line-height: 100%;
	width: 100%;
	padding: 15px;
}

.tc-search-panel-input {
	border-radius: 4px;
	border: 1px solid <<colour foreground>>;
	box-shadow: 0px 0px 15px <<colour search-panel-box-shadow-light>>;
	width: 100%;
	height: 100%;
	padding-left: 10px;
	padding-right: 70px;
	outline: none;
	font-size: 1.35em;
}

.tc-search-panel-matches {
	position: absolute;
	left: 0;
	width: 100%;
	background-color: <<colour tiddler-background>>;
	padding: 15px;
	border-radius: 4px;
	border: 1px solid <<colour foreground>>;
	box-shadow: 0px 0px 15px <<colour search-panel-box-shadow-light>>;
}

.tc-search-panel.tc-search-panel-from-top .tc-search-panel-matches {
	top: 75px;
}

.tc-search-panel.tc-search-panel-from-bottom .tc-search-panel-matches {
	bottom: 75px;
}

<$list filter="[{$:/palette}get[color-scheme]match[dark]]">

.tc-panel-header {
	box-shadow: 0px 1px 1px <<colour panel-header-box-shadow-dark>>;
	background-color: <<colour panel-header-background-dark>>
}

.tc-search-panel-input {
	box-shadow: 0px 0px 15px <<colour search-panel-box-shadow-dark>>;
}

.tc-search-panel-matches {
	box-shadow: 0px 0px 15px <<colour search-panel-box-shadow-dark>>;
}

</$list>

.tc-panel-header h1 {
	color: <<colour primary>>;
	padding-left: 5%;
	margin-top: 0;
	margin-bottom: 0;
	line-height: 50px;
}

.tc-panel-header h4 {
	padding-left: 5%;
	line-height: 15px;
	margin: 3px 0 0 0;
}

.tc-panel-from-right .tc-panel-header {
	right: 0;
}

.tc-panel-from-left .tc-panel-header {
	left: 0;
}

.tc-panel-is-visible .tc-panel-header {
	transition: transform {{$:/config/AnimationDuration}}ms {{$:/config/AnimationDuration}}ms;
	transform: translateY(0px);
}

.tc-panel-container {
	background-color: <<colour page-background>>;
	position: fixed;
	width: {{$:/config/panel/panel-width-below-768px}};
	height: 100%;
	top: 0;
	z-index: 10001;
	transition: transform {{$:/config/AnimationDuration}}ms {{$:/config/AnimationDuration}}ms;
	box-shadow: -1px 0px 1px <<colour panel-container-box-shadow-light>>;
}

<$list filter="[{$:/palette}get[color-scheme]match[dark]]">

.tc-panel-container {
	box-shadow: 0px 1px 1px <<colour panel-container-box-shadow-dark>>;
}

</$list>

@media only screen and (min-width: 768px) {
	.tc-panel-container, .tc-panel-header {
		width: {{$:/config/panel/panel-width-below-1170px}};
	}

	.tc-search-panel {
		width: 550px;
		left: calc((100vw / 2) - 275px);
	}
}

@media only screen and (min-width: 1170px) {
	.tc-panel-container, .tc-panel-header {
		width: {{$:/config/panel/panel-width-above-1170px}};
	}

	.tc-search-panel {
		width: 400px;
		left: calc((100vw / 2) - 200px);
	}
}

.tc-panel-from-right .tc-panel-container {
	right: 0;
	transform: translate3d(100%, 0, 0);
}

.tc-panel-from-left .tc-panel-container {
	left: 0;
	transform: translate3d(-100%, 0, 0);
}

.tc-panel-is-visible .tc-panel-container {
	transform: translate3d(0, 0, 0);
	transition-delay: 0s;
}

@-webkit-keyframes cd-close-1 {
	0%,50% {
		-webkit-transform:rotate(0deg);
		transform:rotate(0deg);
	} 100% {
		-webkit-transform:rotate(45deg);
		transform:rotate(45deg);
	}
}

@keyframes cd-close-1 {
	0%,50% {
		-webkit-transform:rotate(0deg);
		transform:rotate(0deg);
	} 100% {
		-webkit-transform:rotate(45deg);
		transform:rotate(45deg);
	}
}

@-webkit-keyframes cd-close-2 {
	0%,50% {
		-webkit-transform:rotate(0deg);
		transform:rotate(0deg);
	} 100% {
		-webkit-transform:rotate(-45deg);
		transform:rotate(-45deg);
	}
}

@keyframes cd-close-2 {
	0%,50% {
		-webkit-transform:rotate(0deg);
		transform:rotate(0deg);
	} 100% {
		-webkit-transform:rotate(-45deg);
		transform:rotate(-45deg);
	}
}

.tc-panel-close {
	position: absolute;
	top: 0;
	right: 0;
	height: 100%;
	width: 60px;
	display: inline-block;
	overflow: hidden;
	text-indent: 100%;
	white-space: nowrap;
}

.tc-search-panel-close {
	position: absolute;
	top: 15px;
	right: 15px;
	height: calc(100% - 30px);
	display: inline-block;
	overflow: hidden;
	text-indent: 100%;
	white-space: nowrap;
	border-top-right-radius: 4px;
	border-bottom-right-radius: 4px;
	width: 60px;
}

.tc-panel-show, .tc-user-panel-show {
	position: fixed;
	top: 0;
	right: 15px;
	display: inline-block;
	z-index: 10001;
	line-height: 1.2;
	padding: 8px;
}

.tc-user-panel-show {
	right: inherit;
	left: 5px;
}

.tc-panel-show svg, .tc-user-panel-show svg {
	fill: <<colour show-panel-button>>;
}

.tc-panel-show:hover svg, .tc-user-panel-show:hover svg {
	fill: <<colour show-panel-button-foreground>>;
}

<$list filter="[{$:/config/panel/position}match[left]]">

.tc-panel-show {
	left: 5px;
	right: inherit;
}

.tc-user-panel-show {
	left: inherit;
	right: 15px;
}

</$list>

.tc-panel-close:hover, .tc-search-panel-close:hover {
	background-color: <<colour foreground>>;
}

.tc-panel-is-visible .tc-panel-close::before {
	-webkit-animation: cd-close-1 calc(2 * {{$:/config/AnimationDuration}}ms) {{$:/config/AnimationDuration}}ms;
	animation: cd-close-1 calc(2 * {{$:/config/AnimationDuration}}ms) {{$:/config/AnimationDuration}}ms;
}

.tc-search-panel-is-visible .tc-search-panel-close::before {
	-webkit-animation: cd-close-1 {{$:/config/AnimationDuration}}ms calc({{$:/config/AnimationDuration}}ms / 4);
	animation: cd-close-1 {{$:/config/AnimationDuration}}ms calc({{$:/config/AnimationDuration}}ms / 4);	
}

.tc-panel-close::before, .tc-search-panel-close::before {
	-webkit-transform: rotate(45deg);
	transform: rotate(45deg);
}

.tc-panel-close::before, .tc-panel-close::after, .tc-search-panel-close::before, .tc-search-panel-close::after {
	content: " ";
	position: absolute;
	top: 22px;
	left: 20px;
	height: 3px;
	width: 20px;
	background-color: <<colour foreground>>;
	-webkit-backface-visibility: hidden;
	backface-visibility: hidden;
}

.tc-panel-close:hover::before, .tc-search-panel-close:hover::before {
	-webkit-transform: rotate(220deg);
	transform: rotate(220deg);
}

.tc-panel-close:hover::before, .tc-panel-close:hover::after, .tc-search-panel-close:hover::before, .tc-search-panel-close:hover::after {
	background-color: <<colour background>>;
	-webkit-transition: -webkit-transform {{$:/config/AnimationDuration}}ms;
	transition: -webkit-transform {{$:/config/AnimationDuration}}ms;
	transition: transform {{$:/config/AnimationDuration}}ms;
	transition: transform {{$:/config/AnimationDuration}}ms,-webkit-transform {{$:/config/AnimationDuration}}ms;
}

.tc-panel-is-visible .tc-panel-close::after, .tc-search-panel-is-visible .tc-search-panel-close::after {
	-webkit-animation: cd-close-2 calc(2 * {{$:/config/AnimationDuration}}ms) {{$:/config/AnimationDuration}}ms;
	animation: cd-close-2 calc(2 * {{$:/config/AnimationDuration}}ms) {{$:/config/AnimationDuration}}ms;
}

.tc-search-panel-is-visible .tc-search-panel-close::after {
	-webkit-animation: cd-close-2 {{$:/config/AnimationDuration}}ms calc({{$:/config/AnimationDuration}}ms / 4);
	animation: cd-close-2 {{$:/config/AnimationDuration}}ms calc({{$:/config/AnimationDuration}}ms / 4);
}

.tc-panel-close:hover::after, .tc-search-panel-close:hover::after {
	-webkit-transform: rotate(135deg);
	transform: rotate(135deg);
}

.tc-panel-close::after, .tc-search-panel-close::after {
	-webkit-transform: rotate(-45deg);
	transform: rotate(-45deg);
}

.tc-panel-content-header {
	position: absolute;
	top: 78px;
	padding-left: 5%;
	padding-right: 5%;
	height: 115px;
	min-height: 115px;
	min-width: 100%;
}

.tc-user-panel-container {
	position: absolute;
	top: 78px;
	padding-left: 5%;
	padding-right: 5%;
	height: calc(100% - 78px);
	min-width: 100%;
}

.tc-panel-content {
	position: absolute;
	top: calc(78px + 115px);
	overflow: auto;
	-webkit-overflow-scrolling: touch;
	padding-left: 5%;
	padding-right: 5%;
	min-height: calc(100% - 78px - 115px);
	min-width: 100%;
	height: calc(100% - 78px - 115px);
	max-width: 100%;
}

.tc-panel-content .tc-sidebar-lists p {
	margin-top: 3px;
	margin-bottom: 3px;
}

.tc-panel-content .tc-tab-buttons.tc-sidebar-tabs-main {
	padding-top: 0;
}

.tc-panel-content .tc-tab-content.tc-sidebar-tabs-main {
	position: absolute;
	max-height: calc(100% - 2em - 14px);
	min-width: 95%;
	max-width: 95%;
	overflow: auto;
	-webkit-overflow-scrolling: touch;
}

.tc-panel-content .tc-tab-buttons.tc-sidebar-tabs-main {
	white-space: nowrap;
}

.flextemplate-container {
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
	align-items: stretch;
	height: 100vh;
}

.flextemplate-container > .main {
	flex-grow: 1;
}

.flextemplate-container .column-config {
	flex-grow: 0;
	flex-shrink: 0;
	z-index: 9999;
}

/* Slice the column containers into vertical columns */

.flextemplate-container .column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) {
	display: flex;
	flex-direction: row;
	justify-content: flex-start;
	align-items: stretch;
	overflow: hidden;
}

@media (min-width: 800px) {

	<$list filter="[{$:/config/scroll-snap-x}!match[yes]]" variable="ignore">

		<<column-layout>>

	</$list>

	<$list filter="[{$:/config/scroll-snap-x}match[yes]]" variable="ignore">

		.flextemplate-container main.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) {
			display: flex;
			scroll-snap-type: {{$:/config/scroll-snap-type}};
			overflow-x: scroll;
		}

		.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > * {
			flex-basis: initial;
			flex-grow: 0;
			flex-shrink: 0;
			width: calc(100vw / {{$:/config/story-river/horizontal/columns}});
			padding: 0;
			overflow-y: scroll;
			scroll-snap-align: start;
		}

		<$list filter="[{$:/config/story-river/hide-scrollbars}match[yes]]" variable="ignore">

			.flextemplate-container main.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) {
				-ms-overflow-style: none;
				scrollbar-width: none;				
			}

			.flextemplate-container main.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar)::-webkit-scrollbar {
				display: none;				
			}

			.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > * {
				-ms-overflow-style: none;
				scrollbar-width: none;
			}

			.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > *::-webkit-scrollbar {
				display: none;
			}

		</$list>

		.column-container > .tc-top-active-column {
			display: none;
		}

	</$list>

	.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > .tc-top-active-column {
		overflow: hidden;
	}
}

@media (max-width: 800px) {

	.flextemplate-container .column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) {
		display: flex;
		scroll-snap-type: x mandatory;
		overflow-x: scroll;
	}

	.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > * {
		flex-basis: initial;
		flex-grow: 0;
		flex-shrink: 0;
		width: 100vw;
		padding: 0;
		overflow-y: scroll;
		scroll-snap-align: start;
	}

	<$list filter="[{$:/config/story-river/hide-scrollbars}match[yes]]" variable="ignore">

		.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > * {
			-ms-overflow-style: none;
			scrollbar-width: none;
		}

		.column-container:not(.tc-top-toolbar):not(.tc-bottom-toolbar) > *::-webkit-scrollbar {
			display: none;
		}

	</$list>

	.flextemplate-container .column-config-top .column-container:last-of-type {
		display: none;
	}

	.tc-panorama-button {
		display: none;
	}

}

.column-container.tc-top-toolbar, .column-container.tc-bottom-toolbar {
	overflow: hidden;
}

.column-container.tc-top-toolbar > p, .column-container.tc-bottom-toolbar > p {
	margin: 0;
}

/* Adjust width of things that were previously hardcoded */

<$list filter="[list[$:/columns]] ~1" variable="currentColumn">

.flextemplate-container .tc-river-<<currentColumn>> .tc-tiddler-frame {
	width: 100%;
}

</$list>

.tc-river-inner {
	padding: {{$:/config/story-river/padding}}px;
}

.tc-column-active-button {
	display: flex;
	z-index: 2;
	top: 0;
	left: 0;
	height: 15px;
	background-color: <<colour column-active-button-light>>;
}

.tc-column-active-button:not(last-of-type) {
	border-right: thin solid <<colour column-active-button-border>>;
}

@media (max-width: 800px) {
	.tc-column-active-button:not(last-of-type) {
		border-right: none;
	}
}

<$list filter="[{$:/palette}get[color-scheme]match[dark]]">

.tc-column-active-button {
	background-color: <<colour column-active-button-dark>>;
}

</$list>

.tc-column-active-button.tc-column-active {
	background-color: <<colour active-column>>;
}

.column-config-top .column-container {
	box-shadow: 0px 1px 1px <<colour column-config-top-column-container-box-shadow-light>>;
}

<$list filter="[{$:/palette}get[color-scheme]match[dark]]">

.column-config-top .column-container {
	box-shadow: 0px 1px 1px <<colour column-config-top-column-container-box-shadow-dark>>;
}

</$list>

<$list filter="[{$:/themes/tiddlywiki/vanilla/options/stickytitles}match[yes]]">
``
.tc-tiddler-title {
	position: -webkit-sticky;
	position: -moz-sticky;
	position: -o-sticky;
	position: -ms-sticky;
	position: sticky;
	top: 0px;
	background: ``<<colour tiddler-background>>``;
}

``
<$list filter="[range[100]]">
`.tc-river-inner .tc-tiddler-zindex-frame:nth-child(100n+`<$text text=<<currentTiddler>>/>`) {
z-index: `<$text text={{{ [[200]subtract<currentTiddler>] }}}/>`;
}
`
</$list>
<$list filter="[range[100]]">
`.tc-river-inner .tc-tiddler-zindex-frame:nth-child(100n+`<$text text=<<currentTiddler>>/>`) .tc-tiddler-title {
z-index: `<$text text={{{ [[200]subtract<currentTiddler>] }}}/>`;
}
`
</$list>
</$list>


<$list filter="[list[$:/columns]] ~1" variable="currentColumn">

.tc-dropzone-<<currentColumn>> {
	min-height: 100%;
	position: relative;
}

.tc-dropzone-<<currentColumn>>.tc-dragover:before {
	z-index: 10000;
	display: block;
	position: sticky;
	top: 0;
	left: 0;
	right: 0;
	background: <<colour dropzone-background>>;
	text-align: center;
	content: "<<lingo DropMessage>>";
}

</$list>

.tc-river-active {
	background-color: <<colour active-column>>;
}

.tc-tiddler-frame {
	box-shadow: 0px 0px 15px <<colour tiddler-box-shadow-light>>;
}

<$list filter="[{$:/palette}get[color-scheme]match[dark]]">

.tc-tiddler-frame {
	box-shadow: 0px 0px 15px <<colour tiddler-box-shadow-dark>>;
}

</$list>

<$list filter="[{$:/config/story-river/no-tiddler-box-shadows}match[yes]]" variable="ignore">

.tc-tiddler-frame {
	box-shadow: none;
}

</$list>

.tc-activate-column-btn {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	height: 100%;
	cursor: default;
	background-color: transparent;
	-webkit-tap-highlight-color: transparent;
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

.tc-activate-column-btn:focus {
	outline: none !important;
}

.tc-panel-shown-eventcatcher, .tc-panel-close {
	-webkit-tap-highlight-color: transparent;
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;	
}

.tc-panel-shown-eventcatcher:focus {
	outline: none !important;
}

.tc-sidebar-flexpanel {
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
	align-items: stretch;
	height: 25px;
}

.tc-sidebar-flexpanel .tc-sidebar-flexpanel-column-container {
	display: flex;
	flex-direction: row;
	justify-content: flex-start;
	align-items: stretch;
	overflow: hidden;
}

<$list filter="[list[$:/columns]] ~1" variable="currentColumn">

.tc-sidebar-flexpanel-column-container > *:nth-child(<<currentColumn>>) {
	flex-basis: 0;
	flex-grow: 1;
	flex-shrink: 0;
}

</$list>

.tc-sidebar-flexpanel .tc-column-active-button {
	height: 25px;
}

.tc-sidebar-flexpanel .tc-column-active-button:first-of-type {
	border: 1px dashed <<colour column-active-button-border>>;
}

.tc-sidebar-flexpanel .tc-column-active-button {
	border-top: 1px dashed <<colour column-active-button-border>>;
	border-bottom: 1px dashed <<colour column-active-button-border>>;
	border-right: 1px dashed <<colour column-active-button-border>>;
}

.tc-sidebar-flexpanel-column-counter {
	width: 100%;
	text-align: center;
	user-select: none;
	-moz-user-select: none;
	-webkit-user-select: none;
	-ms-user-select: none;
}

.tc-droppable-top-half {
	position: absolute;
	top: calc(-{{$:/config/story-river/tiddler-margin}}px - {{$:/config/story-river/tiddler-border}}px);
	left: calc(-{{$:/config/story-river/padding}}px - {{$:/config/story-river/tiddler-border}}px);
	height: calc(50% + {{$:/config/story-river/tiddler-margin}}px + {{$:/config/story-river/tiddler-border}}px);
	width: calc(100% + (2 * {{$:/config/story-river/padding}}px) + (2 * {{$:/config/story-river/tiddler-border}}px));
	display: none;
	z-index: 501;
}

.tc-tiddler-view-frame:first-of-type .tc-droppable-top-half, .tc-tiddler-edit-frame:first-of-type .tc-droppable-top-half {
	top: calc(-{{$:/config/story-river/padding}}px - {{$:/config/story-river/tiddler-border}}px);
	height: calc(50% + {{$:/config/story-river/padding}}px + {{$:/config/story-river/tiddler-border}}px);
}

.tc-droppable-bottom-half {
	position: absolute;
	top: 50%;
	left: calc(-{{$:/config/story-river/padding}}px - {{$:/config/story-river/tiddler-border}}px);
	height: calc(50% + {{$:/config/story-river/tiddler-border}}px);
	width: calc(100% + (2 * {{$:/config/story-river/padding}}px) + (2 * {{$:/config/story-river/tiddler-border}}px));
	z-index: 501;
	display: none;
}

.tc-droppable-top-half.tc-dragover {
	height: calc(50% + (2 * {{$:/config/story-river/tiddler-margin}}px) + {{$:/state/dragging!!height}}px);
	top: calc(-{{$:/state/dragging!!height}}px - (2 * {{$:/config/story-river/tiddler-margin}}px));
}

.tc-tiddler-view-frame:first-of-type .tc-droppable-top-half.tc-dragover, .tc-tiddler-edit-frame:first-of-type .tc-droppable-top-half.tc-dragover {
	height: calc(50% + {{$:/config/story-river/tiddler-margin}}px + {{$:/config/story-river/padding}}px + {{$:/state/dragging!!height}}px);
	top: calc(-{{$:/state/dragging!!height}}px - {{$:/config/story-river/tiddler-margin}}px - {{$:/config/story-river/padding}}px);
}

.tc-droppable-bottom-half.tc-dragover {
	height: calc(50% + {{$:/config/story-river/tiddler-margin}}px + {{$:/state/dragging!!height}}px);
}

<$list filter="[{$:/state/dragging}match[yes]]">

.tc-droppable-top-half, .tc-droppable-bottom-half {
	display: block;
}

<$set name="dragTiddler" value={{$:/state/dragging!!drag-tiddler}}>

<$set name="dragTiddlerCSSEscaped" value={{{ [<dragTiddler>escapecss[]] }}}>

<<tiddler-frame-transitions>>

</$set>

</$set>

</$list>

<$set name="currentRiver" value={{$:/state/dragging!!river}}>

<$set name="story" value={{{ [[$:/StoryList-]addsuffix<currentRiver>!match[$:/StoryList-1]] ~[[$:/StoryList]] }}}>

<$set name="targetTiddler" value={{$:/state/dragging!!target}}>

<$set name="nextTiddler" value={{{ [list<story>after<targetTiddler>] }}}>

<$set name="margin" value={{$:/state/dragging!!margin}}>

<$set name="targetTiddlerCSSEscaped" value={{{ [<margin>match[top]then<targetTiddler>escapecss[]] :else[<margin>match[bottom]then<nextTiddler>escapecss[]] }}}>

<<target-tiddler-margin>>

</$set>

</$set>

</$set>

</$set>

</$set>

</$set>

<$list filter="[{$:/state/dragging}match[yes]]">

.tc-activate-column-btn {
	display: none;
}

.tc-river-inner {
	height: 100%;
	position: absolute;
	width: 100%;
}

.tc-river-inner > .tc-droppable {
	position: absolute;
	height: calc(100% - (2 * {{$:/config/story-river/padding}}px));
	width: calc(100% - (2 * {{$:/config/story-river/padding}}px));
}

</$list>

<$list filter="[{$:/dragging-enabled}!match[no]]">

.tc-tiddler-frame img {
	-webkit-user-drag: none;
	-khtml-user-drag: none;
	-moz-user-drag: none;
	-o-user-drag: none;
	user-drag: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-o-user-select: none;
	-ms-user-select: none;
	user-select: none;
	touch-action: none;
}

</$list>

.tc-river-inner > .tc-tiddler-view-frame > .tc-draggable, .tc-river-inner > .tc-tiddler-edit-frame > .tc-draggable {
	cursor: default;
}

<$let currentRiver={{$:/state/dragging!!start-river}} dragTiddler={{$:/state/dragging!!drag-tiddler}} startingNextTiddler={{$:/state/dragging!!starting-next-tiddler}} startingNextTiddlerCSSEscaped={{{ [<startingNextTiddler>escapecss[]] }}} dragTiddlerCSSEscaped={{{ [<dragTiddler>escapecss[]] }}}>

<<position-start-tiddlers>>

</$let>

.tc-notification {
	z-index: 10002;
}

hr.simple {
	border: 0;
	height: 1px;
	background: <<colour foreground>>;
}

.tc-top-active-column-draggable {
	cursor: default;
}

.tc-bottom-right-panel {
	position: fixed;
	right: 0;
	bottom: 0;
	font-size: 35px;
	margin-bottom: 25px;
	margin-right: 25px;
	max-width: 35px;
	z-index: 9999;
}

.tc-bottom-right-panel svg {
	fill: <<colour muted-foreground>>;
}

.tc-bottom-right-panel .tc-btn-invisible:hover svg {
	fill: <<colour foreground>>;
}

.tc-bottom-right-panel .tc-btn-invisible.tc-selected svg {
	fill: <<colour tiddler-controls-foreground-selected>>;
}

<$wikify name="dropshadowColour" text="""<<colour selected-dropshadow-light>>""">

	.tc-bottom-right-panel .tc-btn-invisible.tc-selected {
		<$macrocall $name="filter" filter={{{ [[drop-shadow(0px -1px 2px ]addsuffix<dropshadowColour>addsuffix[)]] }}}/>
	}

</$wikify>

<$list filter="[{$:/palette}get[color-scheme]match[dark]]">

	<$wikify name="dropshadowColour" text="""<<colour selected-dropshadow-dark>>""">

		.tc-bottom-right-panel .tc-btn-invisible.tc-selected {
			<$macrocall $name="filter" filter={{{ [[drop-shadow(0px -1px 2px ]addsuffix[$(dropshadowColour)$]addsuffix[)]] }}}/>
		}

	</$wikify>

</$list>

<$list filter="[{$:/config/story-river/style-focused-tiddlers}!match[no]]" variable="ignore">

<$let currentColumn={{$:/columns!!active-column}} currentHistoryList={{{ [[$:/HistoryList-]addsuffix<currentColumn>!match[$:/HistoryList-]!match[$:/HistoryList-1]] ~[[$:/HistoryList]] }}}>

<$set name="cssEscapedTitle" value={{{ [<currentHistoryList>get[current-tiddler]escapecss[]] }}}>

<<style-focused-tiddler>>

</$set>

<$list filter="[list[$:/columns]!match<currentColumn>]" variable="column">

<$let currentHistoryList={{{ [[$:/HistoryList-]addsuffix<column>!match[$:/HistoryList-]!match[$:/HistoryList-1]] ~[[$:/HistoryList]] }}} cssEscapedTitle={{{ [<currentHistoryList>get[current-tiddler]escapecss[]] }}}>

<<style-unfocused-tiddlers>>

</$let>

</$list>

</$let>

</$list>

{{$:/config/StoryViewAnimations}}

</$list>

<$list filter="[{$:/layout}!match[$:/plugins/BTC/tiddlywiki-multi-columns/ui/Layout]]" variable="ignore">

<$set name="cssEscapedTitle" value={{{ [[$:/HistoryList]get[current-tiddler]escapecss[]] }}}>

	<<style-focused-tiddler-normal>>

</$set>

</$list>