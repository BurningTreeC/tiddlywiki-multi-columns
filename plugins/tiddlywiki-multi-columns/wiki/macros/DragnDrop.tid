title: $:/plugins/BTC/tiddlywiki-multi-columns/macros/DragnDrop
tags: $:/tags/Macro

\define btc-top-drop-actions()
<$action-setfield $tiddler="$:/state/drag-handled" text="yes"/><$action-listops $tiddler=<<tv-story-list>> $subfilter="+[insertbefore<actionTiddler>,<currentTiddler>]"/>
<$list filter="[<tv-history-list>get[current-tiddler]match[]] [<tv-history-list>!has[current-tiddler]] +[limit[1]]" variable="ignore">
<$action-setfield $tiddler=<<tv-history-list>> current-tiddler=<<actionTiddler>>/>
</$list>
<$vars fromStoryList={{$:/state/dragging!!starting-from-story}} fromHistoryList={{$:/state/dragging!!from-history}}>
<$list filter="[<fromStoryList>!match<tv-story-list>]" variable="ignore">
	<$list filter="[{$:/state/dragging!!is-focused-tiddler}match[TRUE]]" variable="ignore">
		<$action-setfield $tiddler=<<fromHistoryList>> current-tiddler={{{ [list<fromStoryList>zth{$:/state/dragging!!starting-from-index}] }}}/>
	</$list>
</$list>
</$set>
\end
\define btc-bottom-drop-actions()
<$action-setfield $tiddler="$:/state/drag-handled" text="yes"/>
<$set name="nextTiddler" value={{{ [list<tv-story-list>after<currentTiddler>] }}}>
<$list filter="[<nextTiddler>match[]]" emptyMessage="""
<$action-listops $tiddler=<<tv-story-list>> $subfilter="+[insertbefore<actionTiddler>,<nextTiddler>]"/>
<$list filter="[<tv-history-list>get[current-tiddler]match[]] [<tv-history-list>!has[current-tiddler]] +[limit[1]]" variable="ignore">
<$action-setfield $tiddler=<<tv-history-list>> current-tiddler=<<actionTiddler>>/>
</$list>
""">
<$action-listops $tiddler=<<tv-story-list>> $subfilter="[<actionTiddler>]"/>
<$list filter="[<tv-history-list>get[current-tiddler]match[]] [<tv-history-list>!has[current-tiddler]] +[limit[1]]" variable="ignore">
<$action-setfield $tiddler=<<tv-history-list>> current-tiddler=<<actionTiddler>>/>
</$list>
</$list>
</$set>
\end
\define btc-drag-start-actions()
<$action-setfield $tiddler="$:/state/dragging"
	nth={{{ [list<tv-story-list>allbefore<currentTiddler>count[]] }}}
	height=<<tv-selectednode-height>>
	width=<<tv-selectednode-width>>
	start-river=<<currentColumn>>
	starting-next-tiddler={{{ [list<tv-story-list>after<currentTiddler>] }}}
	starting-from-index={{{ [list<tv-story-list>allbefore<currentTiddler>count[]] }}}
	starting-from-story=<<tv-story-list>>
/>
<$action-setfield $tiddler="$:/state/dragging"
	drag-tiddler=<<currentTiddler>>
	next-tiddler={{{ [list<tv-story-list>after<currentTiddler>] }}}
	from-index={{{ [list<tv-story-list>allbefore<currentTiddler>count[]] }}}
	from-story=<<tv-story-list>>
	from-history=<<tv-history-list>>
	is-focused-tiddler={{{ [<tv-history-list>get[current-tiddler]match<currentTiddler>then[TRUE]] ~[[FALSE]] }}}
	target={{{ [list<tv-story-list>after<currentTiddler>] }}}
/>
<$action-setfield $tiddler="$:/state/DisableInsertAnimation" text="yes"/>
<$action-setfield $tiddler="$:/state/DisableRemoveAnimation" text="yes"/>
<$action-setfield $tiddler="$:/state/dragging" text="yes"/>
<$list filter="[<modifier>!match[ctrl]]" variable="ignore" emptyMessage="""
	<$action-setfield $tiddler="$:/state/dragging" copying="yes"/>
""">
	<$action-listops $tiddler=<<tv-story-list>> $subfilter="-[<currentTiddler>]"/>
</$list>
\end
\define btc-drag-end-actions()
<$list filter="[[$:/state/drag-handled]is[missing]]" emptyMessage="""
<$action-deletetiddler $tiddler="$:/state/dragging"/><$action-deletetiddler $tiddler="$:/state/drag-handled"/>
""">
<$set name="fromStoryList" value={{$:/state/dragging!!from-story}}>
<$set name="fromIndex" value={{$:/state/dragging!!from-index}}>
<$set name="listBeforeTiddler" value={{{ [list<fromStoryList>zth<fromIndex>] }}}>
<$set name="actionTiddler" value={{{ [enlist<actionTiddler>] }}}>
<$action-listops $tiddler=<<fromStoryList>> $subfilter="+[insertbefore<actionTiddler>,<listBeforeTiddler>]"/>
<$action-deletetiddler $tiddler="$:/state/dragging"/><$action-deletetiddler $tiddler="$:/state/drag-handled"/>
</$set>
</$set>
</$set>
</$set>
</$list>
\end